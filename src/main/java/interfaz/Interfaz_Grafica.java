/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfaz;

import Archivo.ManejadorDeArchivo;
import Clases.Arido;
import Clases.AuxiliarMaquinaria;
import Clases.Cliente;
import Clases.ClienteComparator;
import Clases.Compra;
import Clases.Empleado;
import Clases.Maquinaria;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Franc
 */
public class Interfaz_Grafica extends javax.swing.JFrame {

    /**
     * Creates new form Interfaz_Grafica
     */
    public Interfaz_Grafica() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        nombreTextPanel = new javax.swing.JTextPane();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        dniTextPanel = new javax.swing.JTextPane();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        direccionTextPanel = new javax.swing.JTextPane();
        registrarCliente = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        apellidoTextPanel = new javax.swing.JTextPane();
        jScrollPane11 = new javax.swing.JScrollPane();
        telefonoTextPanel = new javax.swing.JTextPane();
        jScrollPane12 = new javax.swing.JScrollPane();
        emailTextPanel = new javax.swing.JTextPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane32 = new javax.swing.JScrollPane();
        tablaOrdenadaAlfabeticamente = new javax.swing.JTable();
        mostrarClientesOrdenadosAlfabeticamente = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane33 = new javax.swing.JScrollPane();
        tablaOrdenadaPorCompras = new javax.swing.JTable();
        mostrarClientesOrdenadosPorCompras = new javax.swing.JButton();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        nombreEmpleadoTextPanel = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        dniEmpleadoTextPanel = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        legajoEmpleadoTextPanel = new javax.swing.JTextPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        telefonoEmpleadoTextPanel = new javax.swing.JTextPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        apellidoEmpleadoTextPanel = new javax.swing.JTextPane();
        botonRegistrarEmpleado = new javax.swing.JButton();
        fechaEmpleado = new org.jdatepicker.JDatePicker();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane13 = new javax.swing.JScrollPane();
        direccionEmpleadoTextPanel = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane34 = new javax.swing.JScrollPane();
        tablaEmpleados = new javax.swing.JTable();
        mostrarDatosEmpleados = new javax.swing.JButton();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jScrollPane35 = new javax.swing.JScrollPane();
        motorMaquina = new javax.swing.JTextPane();
        jScrollPane36 = new javax.swing.JScrollPane();
        marcaMaquina = new javax.swing.JTextPane();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        registrarMaquina = new javax.swing.JButton();
        jLabel42 = new javax.swing.JLabel();
        jScrollPane39 = new javax.swing.JScrollPane();
        empleadoACargoMaquina = new javax.swing.JTextPane();
        jLabel43 = new javax.swing.JLabel();
        jScrollPane40 = new javax.swing.JScrollPane();
        modeloMaquina = new javax.swing.JTextPane();
        jScrollPane41 = new javax.swing.JScrollPane();
        combustibleMaquina = new javax.swing.JTextPane();
        jLabel44 = new javax.swing.JLabel();
        fechaCompraMaquina = new org.jdatepicker.JDatePicker();
        fechaServiceMaquina = new org.jdatepicker.JDatePicker();
        jPanel11 = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jScrollPane25 = new javax.swing.JScrollPane();
        motorCamion = new javax.swing.JTextPane();
        jLabel31 = new javax.swing.JLabel();
        jScrollPane26 = new javax.swing.JScrollPane();
        marcaCamion = new javax.swing.JTextPane();
        jLabel32 = new javax.swing.JLabel();
        registrarCamion = new javax.swing.JButton();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jScrollPane28 = new javax.swing.JScrollPane();
        combustibleCamion = new javax.swing.JTextPane();
        jScrollPane29 = new javax.swing.JScrollPane();
        modeloCamion = new javax.swing.JTextPane();
        jScrollPane30 = new javax.swing.JScrollPane();
        empleadoACargoCamion = new javax.swing.JTextPane();
        jLabel36 = new javax.swing.JLabel();
        jScrollPane31 = new javax.swing.JScrollPane();
        capacidadCargaCamion = new javax.swing.JTextPane();
        fechaCompraCamion = new org.jdatepicker.JDatePicker();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane42 = new javax.swing.JScrollPane();
        tablaMaquinaria = new javax.swing.JTable();
        mostrarMaquinaria = new javax.swing.JButton();
        jTabbedPane6 = new javax.swing.JTabbedPane();
        jPanel12 = new javax.swing.JPanel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jScrollPane43 = new javax.swing.JScrollPane();
        nombreArido = new javax.swing.JTextPane();
        jScrollPane44 = new javax.swing.JScrollPane();
        stockArido = new javax.swing.JTextPane();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jScrollPane45 = new javax.swing.JScrollPane();
        precioArido = new javax.swing.JTextPane();
        jLabel49 = new javax.swing.JLabel();
        jScrollPane46 = new javax.swing.JScrollPane();
        descripcionArido = new javax.swing.JTextPane();
        registrarArido = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane47 = new javax.swing.JScrollPane();
        tablaAridos = new javax.swing.JTable();
        mostrarDatosAridos = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        jLabel53 = new javax.swing.JLabel();
        jScrollPane51 = new javax.swing.JScrollPane();
        nombreAridoActualizar = new javax.swing.JTextPane();
        jLabel54 = new javax.swing.JLabel();
        jScrollPane52 = new javax.swing.JScrollPane();
        stockAridoActualizar = new javax.swing.JTextPane();
        actualizarStockButton = new javax.swing.JButton();
        jLabel55 = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        jLabel56 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        jScrollPane53 = new javax.swing.JScrollPane();
        nombreAridoPrecioActualizar = new javax.swing.JTextPane();
        jLabel58 = new javax.swing.JLabel();
        jScrollPane54 = new javax.swing.JScrollPane();
        precioAridoActualizar = new javax.swing.JTextPane();
        actualizarPrecioButton = new javax.swing.JButton();
        jTabbedPane5 = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jScrollPane19 = new javax.swing.JScrollPane();
        metrosCubicosCompra = new javax.swing.JTextPane();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jScrollPane21 = new javax.swing.JScrollPane();
        clienteCompra = new javax.swing.JTextPane();
        registrarCompra = new javax.swing.JButton();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jScrollPane24 = new javax.swing.JScrollPane();
        empleadoACargoCompra1 = new javax.swing.JTextPane();
        jLabel50 = new javax.swing.JLabel();
        jScrollPane48 = new javax.swing.JScrollPane();
        empleadoACargoCompra2 = new javax.swing.JTextPane();
        jLabel51 = new javax.swing.JLabel();
        jScrollPane49 = new javax.swing.JScrollPane();
        empleadoACargoCompra3 = new javax.swing.JTextPane();
        fechaPedidoCompra = new org.jdatepicker.JDatePicker();
        fechaEntregaCompra = new org.jdatepicker.JDatePicker();
        jLabel52 = new javax.swing.JLabel();
        jScrollPane20 = new javax.swing.JScrollPane();
        nombreAridoCompra = new javax.swing.JTextPane();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane50 = new javax.swing.JScrollPane();
        tablaCompras = new javax.swing.JTable();
        mostrarDatosCompra = new javax.swing.JButton();
        fechaInicioCompras = new org.jdatepicker.JDatePicker();
        fechaFinCompras = new org.jdatepicker.JDatePicker();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cantera de Áridos");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel8.setText("Ingrese los datos del cliente:");

        jLabel9.setText("Nombre:");

        nombreTextPanel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nombreTextPanelKeyTyped(evt);
            }
        });
        jScrollPane7.setViewportView(nombreTextPanel);

        jLabel10.setText("DNI:");

        jScrollPane8.setViewportView(dniTextPanel);

        jLabel11.setText("Dirección:");

        jScrollPane9.setViewportView(direccionTextPanel);

        registrarCliente.setText("Registrar");
        registrarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrarClienteActionPerformed(evt);
            }
        });

        jLabel12.setText("Apellido:");

        jLabel13.setText("Teléfono:");

        jLabel14.setText("Correo Electrónico:");

        jScrollPane10.setViewportView(apellidoTextPanel);

        jScrollPane11.setViewportView(telefonoTextPanel);

        jScrollPane12.setViewportView(emailTextPanel);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(registrarCliente)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel10Layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE))
                                    .addGroup(jPanel10Layout.createSequentialGroup()
                                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel9)
                                            .addComponent(jLabel10))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                                            .addComponent(jScrollPane7))))
                                .addGap(57, 57, 57)
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel10Layout.createSequentialGroup()
                                        .addComponent(jLabel14)
                                        .addGap(38, 38, 38)
                                        .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 571, Short.MAX_VALUE))
                                    .addGroup(jPanel10Layout.createSequentialGroup()
                                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel12)
                                            .addComponent(jLabel13))
                                        .addGap(87, 87, 87)
                                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane11)
                                            .addComponent(jScrollPane10))))))
                        .addGap(46, 46, 46))))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.LEADING))))
                .addGap(26, 26, 26)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addComponent(registrarCliente)
                .addGap(120, 120, 120))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane3.addTab("Registrar", jPanel3);

        tablaOrdenadaAlfabeticamente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Apellido", "DNI", "Teléfono", "Dirección", "Correo Electronico"
            }
        ));
        jScrollPane32.setViewportView(tablaOrdenadaAlfabeticamente);

        mostrarClientesOrdenadosAlfabeticamente.setText("Mostrar datos");
        mostrarClientesOrdenadosAlfabeticamente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarClientesOrdenadosAlfabeticamenteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mostrarClientesOrdenadosAlfabeticamente)
                    .addComponent(jScrollPane32, javax.swing.GroupLayout.PREFERRED_SIZE, 1197, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane32, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mostrarClientesOrdenadosAlfabeticamente)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Listar (ordenados alfabeticamente)", jPanel4);

        tablaOrdenadaPorCompras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Apellido", "DNI", "Teléfono", "Dirección", "Correo Electrónico", "Cantidad de Compras"
            }
        ));
        jScrollPane33.setViewportView(tablaOrdenadaPorCompras);

        mostrarClientesOrdenadosPorCompras.setText("Mostrar datos");
        mostrarClientesOrdenadosPorCompras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarClientesOrdenadosPorComprasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mostrarClientesOrdenadosPorCompras)
                    .addComponent(jScrollPane33, javax.swing.GroupLayout.PREFERRED_SIZE, 1197, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane33, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mostrarClientesOrdenadosPorCompras)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Listar (ordenados por cantidad de compras)", jPanel9);

        jTabbedPane1.addTab("Clientes", jTabbedPane3);

        jLabel1.setText("Nombre:");

        jLabel2.setText("Apellido:");

        jLabel3.setText("DNI:");

        jLabel5.setText("Ingrese los datos del empleado:");

        jLabel4.setText("Teléfono:");

        jLabel6.setText("Fecha de ingreso a la empresa:");

        jLabel7.setText("Número de legajo:");

        jScrollPane1.setViewportView(nombreEmpleadoTextPanel);

        jScrollPane2.setViewportView(dniEmpleadoTextPanel);

        jScrollPane4.setViewportView(legajoEmpleadoTextPanel);

        jScrollPane5.setViewportView(telefonoEmpleadoTextPanel);

        jScrollPane6.setViewportView(apellidoEmpleadoTextPanel);

        botonRegistrarEmpleado.setText("Registrar");
        botonRegistrarEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRegistrarEmpleadoActionPerformed(evt);
            }
        });

        fechaEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fechaEmpleadoActionPerformed(evt);
            }
        });

        jLabel15.setText("Dirección:");

        jScrollPane13.setViewportView(direccionEmpleadoTextPanel);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(botonRegistrarEmpleado)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addComponent(fechaEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1))
                        .addGap(48, 48, 48)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(53, 53, 53)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel2)
                        .addComponent(jLabel4))
                    .addComponent(jLabel15))
                .addGap(35, 35, 35)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                    .addComponent(jScrollPane5)
                    .addComponent(jScrollPane6))
                .addGap(0, 125, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane1, jScrollPane2});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap(79, Short.MAX_VALUE)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(fechaEmpleado, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addComponent(botonRegistrarEmpleado)
                .addGap(120, 120, 120))
        );

        jTabbedPane2.addTab("Dar de alta", jPanel2);

        tablaEmpleados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Apellido", "DNI", "Teléfono", "Dirección", "Número de legajo", "Fecha de ingreso a la empresa"
            }
        ));
        jScrollPane34.setViewportView(tablaEmpleados);

        mostrarDatosEmpleados.setText("Mostrar datos");
        mostrarDatosEmpleados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarDatosEmpleadosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mostrarDatosEmpleados)
                    .addComponent(jScrollPane34, javax.swing.GroupLayout.PREFERRED_SIZE, 1197, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane34, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mostrarDatosEmpleados)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Listar", jPanel1);

        jTabbedPane1.addTab("Empleados", jTabbedPane2);

        jLabel37.setText("Ingrese los datos de la máquina:");

        jLabel38.setText("Motor:");

        jLabel39.setText("Marca:");

        jScrollPane35.setViewportView(motorMaquina);

        jScrollPane36.setViewportView(marcaMaquina);

        jLabel40.setText("Fecha de compra:");

        jLabel41.setText("Fecha del último service:");

        registrarMaquina.setText("Registrar");
        registrarMaquina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrarMaquinaActionPerformed(evt);
            }
        });

        jLabel42.setText("Empleado a cargo (Ingrese el número de legajo correspondiente)");

        jScrollPane39.setViewportView(empleadoACargoMaquina);

        jLabel43.setText("Modelo:");

        jScrollPane40.setViewportView(modeloMaquina);

        jScrollPane41.setViewportView(combustibleMaquina);

        jLabel44.setText("Combustible:");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(registrarMaquina)
                            .addComponent(jLabel37))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel14Layout.createSequentialGroup()
                                .addComponent(jLabel38)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane35, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel14Layout.createSequentialGroup()
                                .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane36, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel14Layout.createSequentialGroup()
                                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel41)
                                    .addComponent(jLabel40))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fechaServiceMaquina, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fechaCompraMaquina, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(38, 44, Short.MAX_VALUE)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel14Layout.createSequentialGroup()
                                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel44)
                                    .addComponent(jLabel43))
                                .addGap(58, 58, 58)
                                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane40)
                                    .addComponent(jScrollPane41)))
                            .addGroup(jPanel14Layout.createSequentialGroup()
                                .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane39, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)))))
                .addGap(23, 23, 23))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addComponent(jLabel37)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel44, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane41, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane35, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane40, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel43, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane36, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane39, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel14Layout.createSequentialGroup()
                                        .addComponent(fechaCompraMaquina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(4, 4, 4)))
                                .addGap(26, 26, 26)
                                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fechaServiceMaquina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(145, 145, 145))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                                .addComponent(registrarMaquina)
                                .addGap(72, 72, 72))))
                    .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane4.addTab("Registrar máquina", jPanel5);

        jLabel29.setText("Ingrese los datos del camión:");

        jLabel30.setText("Motor:");

        jScrollPane25.setViewportView(motorCamion);

        jLabel31.setText("Marca:");

        jScrollPane26.setViewportView(marcaCamion);

        jLabel32.setText("Fecha de compra:");

        registrarCamion.setText("Registrar");
        registrarCamion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrarCamionActionPerformed(evt);
            }
        });

        jLabel33.setText("Combustible:");

        jLabel34.setText("Modelo:");

        jLabel35.setText("Empleado a cargo (Ingrese el número de legajo correspondiente):");

        jScrollPane28.setViewportView(combustibleCamion);

        jScrollPane29.setViewportView(modeloCamion);

        jScrollPane30.setViewportView(empleadoACargoCamion);

        jLabel36.setText("Capacidad de carga: (en metros cubicos)");

        jScrollPane31.setViewportView(capacidadCargaCamion);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(registrarCamion)
                    .addComponent(jLabel29)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addComponent(jLabel36)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane31, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel11Layout.createSequentialGroup()
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel11Layout.createSequentialGroup()
                                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel30))
                                        .addGap(59, 59, 59))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                                        .addComponent(jLabel32)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane26, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                                    .addComponent(jScrollPane25)
                                    .addComponent(fechaCompraCamion, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(46, 46, 46)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane30))
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel33)
                                    .addComponent(jLabel34))
                                .addGap(54, 54, 54)
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane29, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                                    .addComponent(jScrollPane28))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(314, 314, 314))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel29)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel11Layout.createSequentialGroup()
                            .addGap(26, 26, 26)
                            .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane28, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(34, 34, 34)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane29, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel34, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane26, javax.swing.GroupLayout.Alignment.LEADING))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane30)
                    .addComponent(fechaCompraCamion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(36, 36, 36)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane31)
                    .addComponent(jLabel36, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(31, 31, 31)
                .addComponent(registrarCamion)
                .addGap(72, 72, 72))
        );

        jTabbedPane4.addTab("Registrar camión", jPanel11);

        tablaMaquinaria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Motor", "Combustible", "Marca", "Modelo", "Fecha de compra", "Empleado a cargo (legajo)", "Es camión?", "Capacidad de carga", "Fecha del último service"
            }
        ));
        jScrollPane42.setViewportView(tablaMaquinaria);

        mostrarMaquinaria.setText("Mostrar datos");
        mostrarMaquinaria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarMaquinariaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mostrarMaquinaria)
                    .addComponent(jScrollPane42, javax.swing.GroupLayout.PREFERRED_SIZE, 1222, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane42, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mostrarMaquinaria)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("Listar", jPanel6);

        jTabbedPane1.addTab("Maquinaria", jTabbedPane4);

        jLabel45.setText("Ingrese los datos del árido:");

        jLabel46.setText("Nombre:");

        jScrollPane43.setViewportView(nombreArido);

        jScrollPane44.setViewportView(stockArido);

        jLabel47.setText("Stock disponible:");

        jLabel48.setText("Precio:");

        jScrollPane45.setViewportView(precioArido);

        jLabel49.setText("Descripción:");

        jScrollPane46.setViewportView(descripcionArido);

        registrarArido.setText("Registrar");
        registrarArido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrarAridoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel45)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel46)
                                    .addComponent(jLabel48))
                                .addGap(42, 42, 42)
                                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane45, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                                    .addComponent(jScrollPane43))
                                .addGap(42, 42, 42)
                                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel47)
                                    .addComponent(jLabel49)))
                            .addComponent(registrarArido))
                        .addGap(35, 35, 35)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane46, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                            .addComponent(jScrollPane44))))
                .addContainerGap(150, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel45)
                .addGap(27, 27, 27)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel46, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel47, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane44, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane43, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane45, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel48, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel49, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane46, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(registrarArido)
                .addContainerGap(201, Short.MAX_VALUE))
        );

        jTabbedPane6.addTab("Registrar", jPanel12);

        tablaAridos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nombre", "Stock disponible", "Precio", "Descripción"
            }
        ));
        jScrollPane47.setViewportView(tablaAridos);

        mostrarDatosAridos.setText("Mostrar datos");
        mostrarDatosAridos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarDatosAridosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mostrarDatosAridos)
                    .addComponent(jScrollPane47, javax.swing.GroupLayout.PREFERRED_SIZE, 1214, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane47, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mostrarDatosAridos)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        jTabbedPane6.addTab("Listar", jPanel13);

        jLabel53.setText("Nombre:");

        jScrollPane51.setViewportView(nombreAridoActualizar);

        jLabel54.setText("Nuevo stock:");

        jScrollPane52.setViewportView(stockAridoActualizar);

        actualizarStockButton.setText("Actualizar stock");
        actualizarStockButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarStockButtonActionPerformed(evt);
            }
        });

        jLabel55.setText("Ingrese los datos del árido a actualizar:");

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel55)
                    .addComponent(actualizarStockButton)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel53)
                            .addComponent(jLabel54))
                        .addGap(42, 42, 42)
                        .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane52)
                            .addComponent(jScrollPane51, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(766, Short.MAX_VALUE))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel55, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel53, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane51, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane52, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel54, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(actualizarStockButton)
                .addContainerGap(207, Short.MAX_VALUE))
        );

        jTabbedPane6.addTab("Actualizar stock", jPanel15);

        jLabel56.setText("Ingrese los datos del árido a actualizar:");

        jLabel57.setText("Nombre:");

        jScrollPane53.setViewportView(nombreAridoPrecioActualizar);

        jLabel58.setText("Nuevo precio:");

        jScrollPane54.setViewportView(precioAridoActualizar);

        actualizarPrecioButton.setText("Actualizar precio");
        actualizarPrecioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarPrecioButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel56)
                    .addComponent(actualizarPrecioButton)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel57)
                            .addComponent(jLabel58))
                        .addGap(42, 42, 42)
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane54)
                            .addComponent(jScrollPane53, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(761, Short.MAX_VALUE))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel56, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel57, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane53, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane54, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel58, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(actualizarPrecioButton)
                .addContainerGap(207, Short.MAX_VALUE))
        );

        jTabbedPane6.addTab("Actualizar precio", jPanel16);

        jTabbedPane1.addTab("Áridos", jTabbedPane6);

        jLabel22.setText("Ingrese los datos de la compra:");

        jLabel23.setText("Metros cúbicos:");

        jScrollPane19.setViewportView(metrosCubicosCompra);

        jLabel24.setText("Fecha del pedido:");

        jLabel25.setText("Cliente:");

        jScrollPane21.setViewportView(clienteCompra);

        registrarCompra.setText("Registrar");
        registrarCompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrarCompraActionPerformed(evt);
            }
        });

        jLabel27.setText("Fecha de entrega:");

        jLabel28.setText("Empleado a cargo 1:");

        jScrollPane24.setViewportView(empleadoACargoCompra1);

        jLabel50.setText("Empleado a cargo 2 (opcional):");

        jScrollPane48.setViewportView(empleadoACargoCompra2);

        jLabel51.setText("Empleado a cargo 3 (opcional):");

        jScrollPane49.setViewportView(empleadoACargoCompra3);

        jLabel52.setText("Árido:");

        jScrollPane20.setViewportView(nombreAridoCompra);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel22)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanel7Layout.createSequentialGroup()
                                    .addComponent(jLabel50)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                                    .addComponent(jScrollPane48, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createSequentialGroup()
                                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel24)
                                        .addComponent(jLabel25)
                                        .addComponent(jLabel52))
                                    .addGap(78, 78, 78)
                                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane20)
                                        .addComponent(jScrollPane21)
                                        .addComponent(fechaPedidoCompra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addComponent(registrarCompra))
                        .addGap(46, 46, 46)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel27)
                                    .addComponent(jLabel28)
                                    .addComponent(jLabel23))
                                .addGap(82, 82, 82)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane19, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
                                    .addComponent(fechaEntregaCompra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane24)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel51, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane49, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(150, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel22)
                .addGap(22, 22, 22)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel52, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(fechaEntregaCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(fechaPedidoCompra, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(42, 42, 42)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane21, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel28, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane49, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel51, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel50, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane48, javax.swing.GroupLayout.Alignment.TRAILING)))
                        .addGap(42, 42, 42)
                        .addComponent(registrarCompra)
                        .addGap(52, 52, 52))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jTabbedPane5.addTab("Generar", jPanel7);

        tablaCompras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Árido", "Metros cubicos", "Precio total", "Fecha del pedido", "Fecha de entrega", "DNI del cliente", "Empleado a cargo 1", "Empleado a cargo 2", "Empleado a cargo 3"
            }
        ));
        jScrollPane50.setViewportView(tablaCompras);

        mostrarDatosCompra.setText("Mostrar datos");
        mostrarDatosCompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarDatosCompraActionPerformed(evt);
            }
        });

        jLabel16.setText("Fecha de fin del periodo a listar:");

        jLabel17.setText("Fecha de inicio del periodo a listar:");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addGap(35, 35, 35)
                        .addComponent(fechaInicioCompras, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(jLabel16)
                        .addGap(18, 18, 18)
                        .addComponent(fechaFinCompras, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(mostrarDatosCompra)
                    .addComponent(jScrollPane50, javax.swing.GroupLayout.PREFERRED_SIZE, 1205, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fechaInicioCompras, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(fechaFinCompras, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel8Layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(27, 27, 27)))
                .addComponent(jScrollPane50, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mostrarDatosCompra)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jTabbedPane5.addTab("Listar", jPanel8);

        jTabbedPane1.addTab("Compras", jTabbedPane5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1255, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonRegistrarEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRegistrarEmpleadoActionPerformed
        String nombre = nombreEmpleadoTextPanel.getText();
        String apellido = apellidoEmpleadoTextPanel.getText();
        String dni = dniEmpleadoTextPanel.getText();
        String telefono = telefonoEmpleadoTextPanel.getText();
        String direccion = direccionEmpleadoTextPanel.getText();
        String legajo = legajoEmpleadoTextPanel.getText();


        int encontradoDNI = 0;
        int encontradoLegajo = 0;
        ArrayList<Empleado> arregloEmpleadosAVerificar = new ArrayList<>();
        ManejadorDeArchivo m = new ManejadorDeArchivo("empleados.txt");
        m.abrirArchivo();
        m.leerDatosEmpleados(arregloEmpleadosAVerificar);
        m.cerrarArchivo();

        for (Empleado empleado : arregloEmpleadosAVerificar) {
            String dniEmpleado = String.valueOf(empleado.getDni());
            if (dniEmpleado.equals(dni)) {
                encontradoDNI = 1;
                break;
            }
        }
        
        for (Empleado empleado : arregloEmpleadosAVerificar) {
            String legajoEmpleado = String.valueOf(empleado.getLegajo());
            if (legajoEmpleado.equals(legajo)) {
                encontradoLegajo = 1;
                break;
            }
        }
        
        
        
        // Obtener la fecha seleccionada como objeto GregorianCalendar
        GregorianCalendar fechaSeleccionadaGregorian = (GregorianCalendar) fechaEmpleado.getModel().getValue();
        
        
        // CONTROLES
        boolean valido = true;
        StringBuilder mensajeError = new StringBuilder("Se encontraron los siguientes errores:\n");

        if (nombre.isEmpty() || apellido.isEmpty() || dni.isEmpty() || telefono.isEmpty() || direccion.isEmpty() || legajo.isEmpty() || fechaSeleccionadaGregorian==null) {
            mensajeError.append("- Todos los campos son obligatorios.\n");
            valido = false;
        } else {

            if (!nombre.matches("[\\p{L} ]{2,}")) {
                mensajeError.append("- El nombre debe contener solo letras y tener más de dos caracteres.\n");
                valido = false;
            }

            if (!apellido.matches("[\\p{L} ]{2,}")) {
                mensajeError.append("- El apellido debe contener solo letras y tener más de dos caracteres.\n");
                valido = false;
            }

            if (!dni.matches("[1-9]\\d{6,7}") || Long.parseLong(dni) <= 0) {
                mensajeError.append("- El DNI debe ser un número entre 1 millón y 99 millones.\n");
                valido = false;
            }

            if (!direccion.matches("[0-9a-zA-Z,. \\p{L}-]+")) {
                mensajeError.append("- La dirección solo puede contener números o letras.\n");
                valido = false;
            }

            if (!legajo.matches("\\d+") || Long.parseLong(legajo) <= 0) {
                mensajeError.append("- El legajo debe ser un número positivo.\n");
                valido = false;
            }

            if (!telefono.matches("\\d{10,}") || Long.parseLong(telefono) <= 0) {
                mensajeError.append("- El teléfono debe ser un número de al menos 10 cifras.\n");
                valido = false;
            }
            if (encontradoDNI==1) {
                mensajeError.append("- El DNI ingresado se ha registrado previamente.\n");
                valido = false;
            }
            if (encontradoLegajo==1) {
                mensajeError.append("- El legajo ingresado se ha registrado previamente.\n");
                valido = false;
            }
        }

        // FIN CONTROLES
        
        
        if (valido) {


            // Convertir el objeto GregorianCalendar a un objeto Date
            Date fechaSeleccionadaDate = fechaSeleccionadaGregorian.getTime();

            // Convertir la fecha a una cadena con el formato deseado
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
            String fechaSeleccionadaString = dateFormat.format(fechaSeleccionadaDate);
            
            
            
            UIManager.put("OptionPane.titleText", "Seleccione una opción");
            UIManager.put("OptionPane.yesButtonText", "Sí");
            UIManager.put("OptionPane.noButtonText", "No");
            UIManager.put("OptionPane.cancelButtonText", "Cancelar");
            int opcion = JOptionPane.showConfirmDialog(this, "Confirma registrar los datos del empleado?");
            if (opcion == JOptionPane.YES_OPTION) {
                ManejadorDeArchivo manejador = new ManejadorDeArchivo("empleados.txt");
                manejador.abrirArchivo();
                manejador.escribirEnArchivo(nombre);
                manejador.escribirEnArchivo(apellido);
                manejador.escribirEnArchivo(dni);
                manejador.escribirEnArchivo(telefono);
                manejador.escribirEnArchivo(direccion);
                manejador.escribirEnArchivo(legajo);
                manejador.escribirEnArchivo(fechaSeleccionadaString);
                manejador.cerrarArchivo();
                UIManager.put("OptionPane.messageDialogTitle", "Mensaje");
                JOptionPane.showMessageDialog(this, "Se ha registrado el empleado");
            } else {
            }
        } else {
            JOptionPane.showMessageDialog(null, mensajeError.toString(), "Error de validación", JOptionPane.WARNING_MESSAGE);
        }
        
        


    }//GEN-LAST:event_botonRegistrarEmpleadoActionPerformed

    private void registrarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrarClienteActionPerformed
        String nombre = nombreTextPanel.getText();
        String apellido = apellidoTextPanel.getText();
        String dni = dniTextPanel.getText();
        String telefono = telefonoTextPanel.getText();
        String direccion = direccionTextPanel.getText();
        String email = emailTextPanel.getText();
        
        int encontrado=0;
        ArrayList<Cliente> arregloClientesAVerificar = new ArrayList<>();
        ManejadorDeArchivo m = new ManejadorDeArchivo("clientes.txt");
        m.abrirArchivo();
        m.leerDatosClientes(arregloClientesAVerificar);
        m.cerrarArchivo();
        
        for (Cliente cliente : arregloClientesAVerificar){
            String dniCliente = String.valueOf(cliente.getDni());
            if (dniCliente.equals(dni)){
                encontrado=1;
                break;
            }
        }
        
        // CONTROLES
        
        boolean valido = true;
        StringBuilder mensajeError = new StringBuilder("Se encontraron los siguientes errores:\n");
        
        
        if (nombre.isEmpty() || apellido.isEmpty() || dni.isEmpty() || telefono.isEmpty() || direccion.isEmpty() || email.isEmpty()) {
            mensajeError.append("- Todos los campos son obligatorios.\n");
            valido = false;
        }
        
        else {
            
            if (!nombre.matches("[\\p{L} ]{2,}")) {
                mensajeError.append("- El nombre debe contener solo letras y tener más de dos caracteres.\n");
                valido = false;
            }

            if (!apellido.matches("[\\p{L} ]{2,}")) {
                mensajeError.append("- El apellido debe contener solo letras y tener más de dos caracteres.\n");
                valido = false;
            }

            if (!dni.matches("[1-9]\\d{6,7}") || Long.parseLong(dni) <= 0) {
                mensajeError.append("- El DNI debe ser un número entre 1 millón y 99 millones.\n");
                valido = false;
            }

            if (!direccion.matches("[0-9a-zA-Z,. \\p{L}-]+")) {
                mensajeError.append("- La dirección solo puede contener números o letras.\n");
                valido = false;
            }

            if (!email.matches("[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}")) {
                mensajeError.append("- El Correo Electrónico debe tener un formato válido.\n");
                valido = false;
            }

            if (!telefono.matches("\\d{10,}") || Long.parseLong(telefono) <= 0) {
                mensajeError.append("- El teléfono debe ser un número de al menos 10 cifras.\n");
                valido = false;
            }            
            if (encontrado==1) {
                mensajeError.append("- El DNI ingresado se ha registrado previamente.\n");
                valido = false;
            }            
        }
        
        
        // FIN CONTROLES
        
        if (valido) {
            
            UIManager.put("OptionPane.titleText", "Seleccione una opción");
            UIManager.put("OptionPane.yesButtonText", "Sí");
            UIManager.put("OptionPane.noButtonText", "No");
            UIManager.put("OptionPane.cancelButtonText", "Cancelar");
            int opcion = JOptionPane.showConfirmDialog(this, "Confirma registrar los datos del cliente?");
            if (opcion == JOptionPane.YES_OPTION) {
                ManejadorDeArchivo manejador = new ManejadorDeArchivo("clientes.txt");
                manejador.abrirArchivo();
                manejador.escribirEnArchivo(nombre);
                manejador.escribirEnArchivo(apellido);
                manejador.escribirEnArchivo(dni);
                manejador.escribirEnArchivo(telefono);
                manejador.escribirEnArchivo(direccion);
                manejador.escribirEnArchivo(email);
                manejador.cerrarArchivo();
                UIManager.put("OptionPane.messageDialogTitle", "Mensaje");                
                JOptionPane.showMessageDialog(this, "Se ha registrado el cliente");
            } else {}
        } else {
            JOptionPane.showMessageDialog(null, mensajeError.toString(), "Error de validación", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_registrarClienteActionPerformed

    private void registrarCompraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrarCompraActionPerformed
        String nombreArido = nombreAridoCompra.getText();
        String metrosCubicos = metrosCubicosCompra.getText();
        String cliente = clienteCompra.getText();
        String empleadoACargo1 = empleadoACargoCompra1.getText();
        String empleadoACargo2 = empleadoACargoCompra2.getText();
        String empleadoACargo3 = empleadoACargoCompra3.getText();
        
        // Obtener la fecha seleccionada como objeto GregorianCalendar
        GregorianCalendar fechaPedidoGregorian = (GregorianCalendar) fechaPedidoCompra.getModel().getValue();
        GregorianCalendar fechaEntregaGregorian = (GregorianCalendar) fechaEntregaCompra.getModel().getValue();

        
        
        

        int encontradoDNI = 0;
        int encontradoLegajo1 = 0;
        int encontradoLegajo2 = 0;
        int encontradoLegajo3 = 0;
        double precioArido=0;
        int legajosEncontrados;
        int stockInsuficiente=0;
        double stockRestante=0;
        double stockFinal=0;
        int encontradoArido = 0;
        ArrayList<Empleado> arregloEmpleadosAVerificar = new ArrayList<>();
        ArrayList<Cliente> arregloClientesAVerificar = new ArrayList<>();
        ArrayList<Arido> arregloAridosAVerificar = new ArrayList<>();
        ManejadorDeArchivo manejadorEmpleados = new ManejadorDeArchivo("empleados.txt");
        ManejadorDeArchivo manejadorClientes = new ManejadorDeArchivo("clientes.txt");
        ManejadorDeArchivo manejadorAridos = new ManejadorDeArchivo("aridos.txt");
        manejadorEmpleados.abrirArchivo();
        manejadorClientes.abrirArchivo();
        manejadorAridos.abrirArchivo();
        manejadorEmpleados.leerDatosEmpleados(arregloEmpleadosAVerificar);
        manejadorClientes.leerDatosClientes(arregloClientesAVerificar);
        manejadorAridos.leerDatosAridos(arregloAridosAVerificar);
        manejadorEmpleados.cerrarArchivo();
        manejadorClientes.cerrarArchivo();
        manejadorAridos.cerrarArchivo();

        
        if (metrosCubicos.isEmpty()) {
            metrosCubicos = "0";
        }
        
        
        for (Cliente c : arregloClientesAVerificar) {
            String dniCliente = String.valueOf(c.getDni());
            if (dniCliente.equals(cliente)) {
                encontradoDNI = 1;
                break;
            }
        }

        for (Empleado empleado : arregloEmpleadosAVerificar) {
            String legajoEmpleado = String.valueOf(empleado.getLegajo());
            if (legajoEmpleado.equals(empleadoACargo1)) {
                encontradoLegajo1 = 1;
                break;
            }
        }
        
        if (!empleadoACargo2.isEmpty()) {
            for (Empleado empleado : arregloEmpleadosAVerificar) {
                String legajoEmpleado = String.valueOf(empleado.getLegajo());
                if (legajoEmpleado.equals(empleadoACargo2)) {
                    encontradoLegajo2 = 1;
                    break;
                }
            }
        }
        else {
            encontradoLegajo2 = 1;
        }
        
        if (!empleadoACargo3.isEmpty()) {
            for (Empleado empleado : arregloEmpleadosAVerificar) {
                String legajoEmpleado = String.valueOf(empleado.getLegajo());
                if (legajoEmpleado.equals(empleadoACargo3)) {
                    encontradoLegajo3 = 1;
                    break;
                }
            }
        }
        else {
            encontradoLegajo3 = 1;
        }
        
        legajosEncontrados = encontradoLegajo1+encontradoLegajo2+encontradoLegajo3;
        
        
        for (Arido arido : arregloAridosAVerificar) {
            String nombreAridoAComparar = arido.getNombre();
            if (nombreAridoAComparar.equalsIgnoreCase(nombreArido)) {
                encontradoArido = 1;
                precioArido = arido.getPrecio();
                break;
            }
        }
        
        for (Arido arido : arregloAridosAVerificar) {
            String nombreAridoAComparar = arido.getNombre();
            if (nombreAridoAComparar.equalsIgnoreCase(nombreArido)) {
                int metrosCubicosPedidos = Integer.parseInt(metrosCubicos);
                stockRestante = arido.getStock();
                if (arido.getStock()<metrosCubicosPedidos) {
                    stockInsuficiente=1;
                }
            }
        }
        
        double precioFinal = (Double.parseDouble(metrosCubicos))*precioArido;

        // CONTROLES
        boolean valido = true;
        StringBuilder mensajeError = new StringBuilder("Se encontraron los siguientes errores:\n");

        if (metrosCubicos.isEmpty() || cliente.isEmpty() || empleadoACargo1.isEmpty() || fechaPedidoGregorian==null || fechaEntregaGregorian==null) {
            mensajeError.append("- Hay campos obligatorios sin llenar.\n");
            valido = false;
        } else {

            if (!metrosCubicos.matches("\\d+") || Double.parseDouble(metrosCubicos) <= 0) {
                mensajeError.append("- Los metros cúbicos deben ser un número positivo.\n");
                valido = false;
            }

            if (!empleadoACargo1.matches("\\d+")) {
                mensajeError.append("- El legajo del empleado 1 debe ser un número.\n");
                valido = false;
            }

            if (!empleadoACargo2.matches("\\d*")) {
                mensajeError.append("- El legajo del empleado 2 debe ser un número.\n");
                valido = false;
            }

            if (!empleadoACargo3.matches("\\d*")) {
                mensajeError.append("- El legajo del empleado 3 debe ser un número.\n");
                valido = false;
            }
            
            if (legajosEncontrados!=3) {
                mensajeError.append("- Los legajos ingresados se tienen que haber registrado previamente.\n");
                valido = false;
            }
            
            if (encontradoDNI == 0) {
                mensajeError.append("- El DNI del cliente ingresado se tiene que haber registrado previamente.\n");
                valido = false;
            }
            
            if (encontradoArido == 0) {
                mensajeError.append("- El nombre del árido ingresado se tiene que haber registrado previamente.\n");
                valido = false;
            }
            
            if (stockInsuficiente == 1) {
                mensajeError.append("- El stock es insuficiente para los metros cúbicos pedidos. Stock restante: " + stockRestante + "\n");
                valido = false;
            }
            
            if ((!empleadoACargo2.isEmpty() && empleadoACargo1.equals(empleadoACargo2))
                    || (!empleadoACargo3.isEmpty() && empleadoACargo1.equals(empleadoACargo3))
                    || (!empleadoACargo2.isEmpty() && !empleadoACargo3.isEmpty() && empleadoACargo2.equals(empleadoACargo3))) {
                mensajeError.append("- Los números de legajo no pueden ser iguales.\n");
                valido = false;
            }
            int comparacion = fechaPedidoGregorian.compareTo(fechaEntregaGregorian);
            if (comparacion > 0) {
                mensajeError.append("- La fecha de entrega no puede ser anterior a la fecha de pedido.\n");
                valido = false;
            }
        }

        // FIN CONTROLES
        
        
        if (valido) {
            // Convertir el objeto GregorianCalendar a un objeto Date
            Date fechaPedido = fechaPedidoGregorian.getTime();
            Date fechaEntrega = fechaEntregaGregorian.getTime();

            // Convertir la fecha a una cadena con el formato deseado
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
            String fechaPedidoString = dateFormat.format(fechaPedido);
            String fechaEntregaString = dateFormat.format(fechaEntrega);
            
            
            if (empleadoACargo2.isEmpty()) {
                empleadoACargo2="-";
            }
            
            if (empleadoACargo3.isEmpty()) {
                empleadoACargo3="-";
            }
            

            
            
            UIManager.put("OptionPane.titleText", "Seleccione una opción");
            UIManager.put("OptionPane.yesButtonText", "Sí");
            UIManager.put("OptionPane.noButtonText", "No");
            UIManager.put("OptionPane.cancelButtonText", "Cancelar");
            int opcion = JOptionPane.showConfirmDialog(this, "Confirma registrar los datos de la compra?\n El precio final es de $" + precioFinal);
            if (opcion == JOptionPane.YES_OPTION) {
                ManejadorDeArchivo manejador = new ManejadorDeArchivo("compras.txt");
                manejador.abrirArchivo();
                manejador.escribirEnArchivo(metrosCubicos);
                manejador.escribirEnArchivo(String.valueOf(precioFinal));
                manejador.escribirEnArchivo(fechaPedidoString);
                manejador.escribirEnArchivo(fechaEntregaString);
                manejador.escribirEnArchivo(cliente);
                manejador.escribirEnArchivo(empleadoACargo1);
                manejador.escribirEnArchivo(empleadoACargo2);
                manejador.escribirEnArchivo(empleadoACargo3);
                manejador.escribirEnArchivo(nombreArido);
                manejador.cerrarArchivo();
                
                
                stockFinal = stockRestante-Double.parseDouble(metrosCubicos);
                for (Arido arido : arregloAridosAVerificar) {
                    String nombreAridoAComparar = arido.getNombre();
                    if (nombreAridoAComparar.equalsIgnoreCase(nombreArido)) {
                        arido.setStock(stockFinal);
                        break;
                    }
                }
                
                manejadorAridos.abrirArchivo();
                manejadorAridos.borrarContenidoArchivo("aridos.txt");
                for (Arido arido: arregloAridosAVerificar) {
                    manejadorAridos.escribirEnArchivo(arido.getNombre());
                    manejadorAridos.escribirEnArchivo(String.valueOf(arido.getStock()));
                    manejadorAridos.escribirEnArchivo(String.valueOf(arido.getPrecio()));
                    manejadorAridos.escribirEnArchivo(arido.getDescripcion());
                }
                manejadorAridos.cerrarArchivo();
                
                
                
                UIManager.put("OptionPane.messageDialogTitle", "Mensaje");
                JOptionPane.showMessageDialog(this, "Se ha registrado la compra");
            } else {
            }
        } else {
            JOptionPane.showMessageDialog(null, mensajeError.toString(), "Error de validación", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_registrarCompraActionPerformed

    private void registrarCamionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrarCamionActionPerformed
        String motor = motorCamion.getText();
        String combustible = combustibleCamion.getText();
        String marca = marcaCamion.getText();
        String modelo = modeloCamion.getText();
        String empleado = empleadoACargoCamion.getText();
        String capacidad = capacidadCargaCamion.getText();

        // Obtener la fecha seleccionada como objeto GregorianCalendar
        GregorianCalendar fechaCompraGregorian = (GregorianCalendar) fechaCompraCamion.getModel().getValue();


        int noEncontradoLegajo = 1;
        ArrayList<Empleado> arregloEmpleadosAVerificar = new ArrayList<>();
        ManejadorDeArchivo m = new ManejadorDeArchivo("empleados.txt");
        m.abrirArchivo();
        m.leerDatosEmpleados(arregloEmpleadosAVerificar);
        m.cerrarArchivo();

        for (Empleado empleadoIterador : arregloEmpleadosAVerificar) {
            String legajoEmpleado = String.valueOf(empleadoIterador.getLegajo());
            if (legajoEmpleado.equals(empleado)) {
                noEncontradoLegajo = 0;
                break;
            }
        } 
        
        
        
        // CONTROLES
        boolean valido = true;
        StringBuilder mensajeError = new StringBuilder("Se encontraron los siguientes errores:\n");

        if (motor.isEmpty() || combustible.isEmpty() || marca.isEmpty() || modelo.isEmpty() || fechaCompraGregorian == null || empleado.isEmpty() || capacidad.isEmpty()) {
            mensajeError.append("- Todos los campos son obligatorios.\n");
            valido = false;
        } else {

            if (!motor.matches("[0-9a-zA-Z,. \\p{L}-]+")) {
                mensajeError.append("- El motor solo puede contener números o letras y debe tener más de dos caracteres.\n");
                valido = false;
            }

            if (!combustible.matches("[0-9a-zA-Z,. \\p{L}-]+")) {
                mensajeError.append("- El combustible solo puede contener números o letras y debe tener más de dos caracteres.\n");
                valido = false;
            }

            if (!marca.matches("[0-9a-zA-Z,. \\p{L}-]+")) {
                mensajeError.append("- La marca solo puede contener números o letras y debe tener más de dos caracteres.\n");
                valido = false;
            }

            if (!modelo.matches("[0-9a-zA-Z,. \\p{L}-]+")) {
                mensajeError.append("- El modelo solo puede contener números o letras y debe tener más de dos caracteres.\n");
                valido = false;
            }
            
            if (!capacidad.matches("\\d+(\\.\\d+)?") || Double.parseDouble(capacidad) <= 0)  {
                mensajeError.append("- La capacidad ingresada debe ser un número.\n");
                valido = false;
            }
            
            if (noEncontradoLegajo == 1) {
                mensajeError.append("- El legajo ingresado se tiene que haber registrado previamente.\n");
                valido = false;
            }
        }

        // FIN CONTROLES
        
        
        if (valido) {
            // Convertir el objeto GregorianCalendar a un objeto Date
            Date fechaCompra = fechaCompraGregorian.getTime();

            // Convertir la fecha a una cadena con el formato deseado
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
            String fechaCompraString = dateFormat.format(fechaCompra);
            
            
            UIManager.put("OptionPane.titleText", "Seleccione una opción");
            UIManager.put("OptionPane.yesButtonText", "Sí");
            UIManager.put("OptionPane.noButtonText", "No");
            UIManager.put("OptionPane.cancelButtonText", "Cancelar");
            int opcion = JOptionPane.showConfirmDialog(this, "Confirma registrar los datos del camión?");
            if (opcion == JOptionPane.YES_OPTION) {
                ManejadorDeArchivo manejador = new ManejadorDeArchivo("maquinaria.txt");
                manejador.abrirArchivo();
                manejador.escribirEnArchivo(motor);
                manejador.escribirEnArchivo(combustible);
                manejador.escribirEnArchivo(marca);
                manejador.escribirEnArchivo(modelo);
                manejador.escribirEnArchivo(fechaCompraString);
                manejador.escribirEnArchivo(empleado);
                manejador.escribirEnArchivo("Si");
                manejador.escribirEnArchivo(capacidad);
                manejador.escribirEnArchivo("-");
                manejador.cerrarArchivo();
                UIManager.put("OptionPane.messageDialogTitle", "Mensaje");
                JOptionPane.showMessageDialog(this, "Se ha registrado el camión");
            } else {
            }            
        } else {
            JOptionPane.showMessageDialog(null, mensajeError.toString(), "Error de validación", JOptionPane.WARNING_MESSAGE);
        }
        


    }//GEN-LAST:event_registrarCamionActionPerformed

    private void registrarMaquinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrarMaquinaActionPerformed
        String motor = motorMaquina.getText();
        String combustible = combustibleMaquina.getText();
        String marca = marcaMaquina.getText();
        String modelo = modeloMaquina.getText();
        String empleado = empleadoACargoMaquina.getText();
        
        // Obtener la fecha seleccionada como objeto GregorianCalendar
        GregorianCalendar fechaCompraGregorian = (GregorianCalendar) fechaCompraMaquina.getModel().getValue();
        GregorianCalendar fechaServiceGregorian = (GregorianCalendar) fechaServiceMaquina.getModel().getValue();


        int noEncontradoLegajo = 1;
        ArrayList<Empleado> arregloEmpleadosAVerificar = new ArrayList<>();
        ManejadorDeArchivo m = new ManejadorDeArchivo("empleados.txt");
        m.abrirArchivo();
        m.leerDatosEmpleados(arregloEmpleadosAVerificar);
        m.cerrarArchivo();

        for (Empleado empleadoIterador : arregloEmpleadosAVerificar) {
            String legajoEmpleado = String.valueOf(empleadoIterador.getLegajo());
            if (legajoEmpleado.equals(empleado)) {
                noEncontradoLegajo = 0;
                break;
            }
        }      
        
        
        
        // CONTROLES
        boolean valido = true;
        StringBuilder mensajeError = new StringBuilder("Se encontraron los siguientes errores:\n");

        if (motor.isEmpty() || combustible.isEmpty() || marca.isEmpty() || modelo.isEmpty() || fechaCompraGregorian == null || fechaServiceGregorian==null) {
            mensajeError.append("- Todos los campos son obligatorios.\n");
            valido = false;
        } else {

            if (!motor.matches("[0-9a-zA-Z,. \\p{L}-]+")) {
                mensajeError.append("- El motor solo puede contener números o letras y debe tener más de dos caracteres.\n");
                valido = false;
            }

            if (!combustible.matches("[0-9a-zA-Z,. \\p{L}-]+")) {
                mensajeError.append("- El combustible solo puede contener números o letras y debe tener más de dos caracteres.\n");
                valido = false;
            }

            if (!marca.matches("[0-9a-zA-Z,. \\p{L}-]+")) {
                mensajeError.append("- La marca solo puede contener números o letras y debe tener más de dos caracteres.\n");
                valido = false;
            }

            if (!modelo.matches("[0-9a-zA-Z,. \\p{L}-]+")) {
                mensajeError.append("- El modelo solo puede contener números o letras y debe tener más de dos caracteres.\n");
                valido = false;
            }
            
            if (noEncontradoLegajo == 1) {
                mensajeError.append("- El legajo ingresado se tiene que haber registrado previamente.\n");
                valido = false;
            }
        }

        // FIN CONTROLES
        
        
        if (valido) {
            
            // Convertir el objeto GregorianCalendar a un objeto Date
            Date fechaCompra = fechaCompraGregorian.getTime();
            Date fechaService = fechaServiceGregorian.getTime();

            // Convertir la fecha a una cadena con el formato deseado
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
            String fechaCompraString = dateFormat.format(fechaCompra);
            String fechaServiceString = dateFormat.format(fechaService);
            
            
            UIManager.put("OptionPane.titleText", "Seleccione una opción");
            UIManager.put("OptionPane.yesButtonText", "Sí");
            UIManager.put("OptionPane.noButtonText", "No");
            UIManager.put("OptionPane.cancelButtonText", "Cancelar");
            int opcion = JOptionPane.showConfirmDialog(this, "Confirma registrar los datos de la máquina?");
            if (opcion == JOptionPane.YES_OPTION) {
                ManejadorDeArchivo manejador = new ManejadorDeArchivo("maquinaria.txt");
                manejador.abrirArchivo();
                manejador.escribirEnArchivo(motor);
                manejador.escribirEnArchivo(combustible);
                manejador.escribirEnArchivo(marca);
                manejador.escribirEnArchivo(modelo);
                manejador.escribirEnArchivo(fechaCompraString);
                manejador.escribirEnArchivo(empleado);
                manejador.escribirEnArchivo("No");
                manejador.escribirEnArchivo("-");
                manejador.escribirEnArchivo(fechaServiceString);
                manejador.cerrarArchivo();
                UIManager.put("OptionPane.messageDialogTitle", "Mensaje");
                JOptionPane.showMessageDialog(this, "Se ha registrado la máquina");
            } else {
            }
        } else {
            JOptionPane.showMessageDialog(null, mensajeError.toString(), "Error de validación", JOptionPane.WARNING_MESSAGE);
        }
        
        


    }//GEN-LAST:event_registrarMaquinaActionPerformed

    private void registrarAridoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrarAridoActionPerformed
        String nombre = nombreArido.getText();
        String stock = stockArido.getText();
        String precio = precioArido.getText();
        String descripcion = descripcionArido.getText();
        
        
        int encontrado = 0;
        ArrayList<Arido> arregloAridosAVerificar = new ArrayList<>();
        ManejadorDeArchivo m = new ManejadorDeArchivo("aridos.txt");
        m.abrirArchivo();
        m.leerDatosAridos(arregloAridosAVerificar);
        m.cerrarArchivo();

        for (Arido arido : arregloAridosAVerificar) {
            String nombreArido = String.valueOf(arido.getNombre());
            if (nombreArido.equalsIgnoreCase(nombre)) {
                encontrado = 1;
                break;
            }
        }      
        
        
        
        // CONTROLES
        boolean valido = true;
        StringBuilder mensajeError = new StringBuilder("Se encontraron los siguientes errores:\n");

        if (nombre.isEmpty() || stock.isEmpty() || precio.isEmpty() || descripcion.isEmpty()) {
            mensajeError.append("- Todos los campos son obligatorios.\n");
            valido = false;
        } else {

            if (!nombre.matches("[\\p{L} ]{2,}")) {
                mensajeError.append("- El nombre debe contener solo letras y tener más de dos caracteres.\n");
                valido = false;
            }

            if (!stock.matches("\\d+(\\.\\d+)?") || Double.parseDouble(stock) <= 0) {
                mensajeError.append("- El stock debe contener un número positivo.\n");
                valido = false;
            }
            
            if (!precio.matches("\\d+") || Double.parseDouble(precio) <= 0) {
                mensajeError.append("- El precio debe contener un número positivo.\n");
                valido = false;
            }

            if (!descripcion.matches("[0-9a-zA-Z,. \\p{L}-]+")) {
                mensajeError.append("- La descripción solo puede contener números o letras.\n");
                valido = false;
            }
            
            if (encontrado==1) {
                mensajeError.append("- El nombre del arido fue ingresado previamente.\n");
                valido = false;
            }
        }
        
        // FIN CONTROLES
        
        
        if (valido) {
            UIManager.put("OptionPane.titleText", "Seleccione una opción");
            UIManager.put("OptionPane.yesButtonText", "Sí");
            UIManager.put("OptionPane.noButtonText", "No");
            UIManager.put("OptionPane.cancelButtonText", "Cancelar");
            int opcion = JOptionPane.showConfirmDialog(this, "Confirma registrar los datos del árido?");
            if (opcion == JOptionPane.YES_OPTION) {
                ManejadorDeArchivo manejador = new ManejadorDeArchivo("aridos.txt");
                manejador.abrirArchivo();
                manejador.escribirEnArchivo(nombre);
                manejador.escribirEnArchivo(stock);
                manejador.escribirEnArchivo(precio);
                manejador.escribirEnArchivo(descripcion);
                manejador.cerrarArchivo();
                UIManager.put("OptionPane.messageDialogTitle", "Mensaje");
                JOptionPane.showMessageDialog(this, "Se ha registrado el árido");
            } else {
            }
        } else {
            JOptionPane.showMessageDialog(null, mensajeError.toString(), "Error de validación", JOptionPane.WARNING_MESSAGE);
        }
        
        


    }//GEN-LAST:event_registrarAridoActionPerformed

    private void fechaEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fechaEmpleadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fechaEmpleadoActionPerformed

    private void nombreTextPanelKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreTextPanelKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_nombreTextPanelKeyTyped

    private void mostrarClientesOrdenadosAlfabeticamenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarClientesOrdenadosAlfabeticamenteActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) tablaOrdenadaAlfabeticamente.getModel();
        modelo.setRowCount(0);
        ArrayList<Cliente> arregloClientes = new ArrayList<>();
        int i=0;
        ManejadorDeArchivo manejador = new ManejadorDeArchivo("clientes.txt");
        manejador.abrirArchivo();
        manejador.leerDatosClientes(arregloClientes);
        
        Collections.sort(arregloClientes);
        
        for (i=0; i<arregloClientes.size();i++){
            Cliente clienteAAgregar = arregloClientes.get(i);
            clienteAAgregar.toString();
            modelo.addRow(new Object[]{        
                clienteAAgregar.getNombre(),
                clienteAAgregar.getApellido(),
                clienteAAgregar.getDni(),
                clienteAAgregar.getTelefono(),
                clienteAAgregar.getDireccion(),
                clienteAAgregar.getEmail()});
        }        
    }//GEN-LAST:event_mostrarClientesOrdenadosAlfabeticamenteActionPerformed

    private void mostrarDatosEmpleadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarDatosEmpleadosActionPerformed
        DefaultTableModel modeloE = (DefaultTableModel) tablaEmpleados.getModel();
        modeloE.setRowCount(0);
        ArrayList<Empleado> arregloEmpleados = new ArrayList<>();
        int i = 0;
        ManejadorDeArchivo manejador = new ManejadorDeArchivo("empleados.txt");
        manejador.abrirArchivo();
        manejador.leerDatosEmpleados(arregloEmpleados);
        Collections.sort(arregloEmpleados);
        for (i = 0; i < arregloEmpleados.size(); i++) {
            Empleado empleadoAAgregar = arregloEmpleados.get(i);
            modeloE.addRow(new Object[]{
                empleadoAAgregar.getNombre(),
                empleadoAAgregar.getApellido(),
                empleadoAAgregar.getDni(),
                empleadoAAgregar.getTelefono(),
                empleadoAAgregar.getDireccion(),
                empleadoAAgregar.getLegajo(),
                empleadoAAgregar.getFechaIngreso()                
            });
        }
    }//GEN-LAST:event_mostrarDatosEmpleadosActionPerformed

    private void mostrarDatosAridosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarDatosAridosActionPerformed
        DefaultTableModel modeloAridos = (DefaultTableModel) tablaAridos.getModel();
        modeloAridos.setRowCount(0);
        ArrayList<Arido> arregloAridos = new ArrayList<>();
        int i = 0;
        ManejadorDeArchivo manejador = new ManejadorDeArchivo("aridos.txt");
        manejador.abrirArchivo();
        manejador.leerDatosAridos(arregloAridos);
        Collections.sort(arregloAridos);
        for (i = 0; i < arregloAridos.size(); i++) {
            Arido aridoAAgregar = arregloAridos.get(i);
            aridoAAgregar.toString();
            modeloAridos.addRow(new Object[]{
                aridoAAgregar.getNombre(),
                aridoAAgregar.getStock(),
                aridoAAgregar.getPrecio(),
                aridoAAgregar.getDescripcion()
            });
        }
    }//GEN-LAST:event_mostrarDatosAridosActionPerformed

    private void mostrarClientesOrdenadosPorComprasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarClientesOrdenadosPorComprasActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) tablaOrdenadaPorCompras.getModel();
        modelo.setRowCount(0);
        ArrayList<Cliente> arregloClientes = new ArrayList<>();
        ArrayList<Compra> arregloCompras = new ArrayList<>();
        int i;
        int j;
        ManejadorDeArchivo manejador = new ManejadorDeArchivo("clientes.txt");
        manejador.abrirArchivo();
        manejador.leerDatosClientes(arregloClientes);
        manejador.leerDatosCompras(arregloCompras);
        
        
        for (i = 0; i < arregloCompras.size(); i++) {
            String compraAVerificarString = arregloCompras.get(i).getCliente();
            int compraAVerificar = Integer.parseInt(compraAVerificarString);
            for (j = 0; j < arregloClientes.size(); j++) {
                int clienteAComparar = arregloClientes.get(j).getDni();
                if (clienteAComparar==compraAVerificar) {
                    arregloClientes.get(j).aumentarCantidadCompras();
                }
                else {}
            }            
        }
        
        Collections.sort(arregloClientes, new ClienteComparator());
        
        
        for (i = 0; i < arregloClientes.size(); i++) {
            Cliente clienteAAgregar = arregloClientes.get(i);
            clienteAAgregar.toString();
            modelo.addRow(new Object[]{
                clienteAAgregar.getNombre(),
                clienteAAgregar.getApellido(),
                clienteAAgregar.getDni(),
                clienteAAgregar.getTelefono(),
                clienteAAgregar.getDireccion(),
                clienteAAgregar.getEmail(),
                clienteAAgregar.getCantidadCompras()
            });
        }
    }//GEN-LAST:event_mostrarClientesOrdenadosPorComprasActionPerformed

    private void mostrarMaquinariaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarMaquinariaActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) tablaMaquinaria.getModel();
        modelo.setRowCount(0);
        ArrayList<AuxiliarMaquinaria> arregloMaquinaria = new ArrayList<>();
        int i = 0;
        ManejadorDeArchivo manejador = new ManejadorDeArchivo("maquinaria.txt");
        manejador.abrirArchivo();
        manejador.leerDatosMaquinaria(arregloMaquinaria);
        for (i = 0; i < arregloMaquinaria.size(); i++) {
            AuxiliarMaquinaria maquinariaAAgregar = arregloMaquinaria.get(i);
            maquinariaAAgregar.toString();
            modelo.addRow(new Object[]{
                maquinariaAAgregar.getMotor(),
                maquinariaAAgregar.getCombustible(),
                maquinariaAAgregar.getMarca(),
                maquinariaAAgregar.getModelo(),
                maquinariaAAgregar.getFechaCompra(),
                maquinariaAAgregar.getLegajo(),
                maquinariaAAgregar.getEsCamion(),
                maquinariaAAgregar.getCapacidadCarga(),
                maquinariaAAgregar.getFechaService()
            });
        }
    }//GEN-LAST:event_mostrarMaquinariaActionPerformed

    private void mostrarDatosCompraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarDatosCompraActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) tablaCompras.getModel();
        modelo.setRowCount(0);
        ArrayList<Compra> arregloCompras = new ArrayList<>();
        ArrayList<Compra> arregloComprasAuxiliar = new ArrayList<>();
        int i = 0;
        ManejadorDeArchivo manejador = new ManejadorDeArchivo("compras.txt");
        manejador.abrirArchivo();
        manejador.leerDatosCompras(arregloCompras);
        manejador.cerrarArchivo();
        
        // Obtener la fecha seleccionada como objeto GregorianCalendar
        GregorianCalendar fechaInicioGregorian = (GregorianCalendar) fechaInicioCompras.getModel().getValue();
        GregorianCalendar fechaFinGregorian = (GregorianCalendar) fechaFinCompras.getModel().getValue();
        
        if (fechaInicioGregorian==null || fechaFinGregorian==null){
            JOptionPane.showMessageDialog(null, "Por favor, selecciona las fechas del periodo a listar", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
        else {
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");

            // Convertir el objeto GregorianCalendar a un objeto Date
            Date fechaInicioDate = fechaInicioGregorian.getTime();
            Date fechaFinDate = fechaFinGregorian.getTime();

            // Convertir la fecha a una cadena con el formato deseado
            String fechaInicioString = sdf.format(fechaInicioDate);
            String fechaFinString = sdf.format(fechaFinDate);      

            for (i=0; i<arregloCompras.size();i++) {
                String fechaString = arregloCompras.get(i).getFechaPedido();
                try {
                    Date fechaDate = sdf.parse(fechaString); // PARSEA STRING A DATE  
                    Date fechaInicioDate2 = sdf.parse(fechaInicioString);
                    Date fechaFinDate2 =  sdf.parse(fechaFinString); 
                    int resultado1 = fechaDate.compareTo(fechaInicioDate2);
                    int resultado2 = fechaDate.compareTo(fechaFinDate2);

                    if (resultado1>=0 && resultado2<=0){
                        arregloComprasAuxiliar.add(arregloCompras.get(i));
                    }
                    else {                  
                    }


                } catch (ParseException e) {
                    e.printStackTrace();
                  }

            }

            for (i = 0; i < arregloComprasAuxiliar.size(); i++) {
                Compra compraAAgregar = arregloComprasAuxiliar.get(i);
                modelo.addRow(new Object[]{
                    compraAAgregar.getArido(),
                    compraAAgregar.getMetrosCubicos(),
                    compraAAgregar.getPrecioTotal(),
                    compraAAgregar.getFechaPedido(),
                    compraAAgregar.getFechaEntrega(),
                    compraAAgregar.getCliente(),
                    compraAAgregar.getaCargoPedido(),
                    compraAAgregar.getaCargoPedido2(),
                    compraAAgregar.getaCargoPedido3()
                });
           }
        }
    }//GEN-LAST:event_mostrarDatosCompraActionPerformed

    private void actualizarStockButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarStockButtonActionPerformed
        String nombre = nombreAridoActualizar.getText();
        String stock = stockAridoActualizar.getText();
        
        
        int encontrado = 0;
        ArrayList<Arido> arregloAridosAVerificar = new ArrayList<>();
        ManejadorDeArchivo m = new ManejadorDeArchivo("aridos.txt");
        m.abrirArchivo();
        m.leerDatosAridos(arregloAridosAVerificar);
        m.cerrarArchivo();

        for (Arido arido : arregloAridosAVerificar) {
            String nombreArido = String.valueOf(arido.getNombre());
            if (nombreArido.equalsIgnoreCase(nombre)) {
                encontrado = 1;
                arido.setStock(Double.parseDouble(stock));
                break;
            }
        }
        
        // CONTROLES
        boolean valido = true;
        StringBuilder mensajeError = new StringBuilder("Se encontraron los siguientes errores:\n");

        if (nombre.isEmpty() || stock.isEmpty()) {
            mensajeError.append("- Todos los campos son obligatorios.\n");
            valido = false;
        } else {

            if (!nombre.matches("[a-zA-Z ]{2,}")) {
                mensajeError.append("- El nombre debe contener solo letras y tener más de dos caracteres.\n");
                valido = false;
            }

            if (!stock.matches("\\d+(\\.\\d+)?") || Double.parseDouble(stock) <= 0) {
                mensajeError.append("- El stock debe contener un número positivo.\n");
                valido = false;
            }

            if (encontrado != 1) {
                mensajeError.append("- El nombre del árido no fue ingresado previamente.\n");
                valido = false;
            }
        }
        
        

        // FIN CONTROLES
        
        if (valido) {
            UIManager.put("OptionPane.titleText", "Seleccione una opción");
            UIManager.put("OptionPane.yesButtonText", "Sí");
            UIManager.put("OptionPane.noButtonText", "No");
            UIManager.put("OptionPane.cancelButtonText", "Cancelar");
            int opcion = JOptionPane.showConfirmDialog(this, "Confirma actualizar los datos del árido?");
            if (opcion == JOptionPane.YES_OPTION) {
                m.abrirArchivo();
                m.borrarContenidoArchivo("aridos.txt");
                for (Arido arido: arregloAridosAVerificar) {
                    m.escribirEnArchivo(arido.getNombre());
                    m.escribirEnArchivo(String.valueOf(arido.getStock()));
                    m.escribirEnArchivo(String.valueOf(arido.getPrecio()));
                    m.escribirEnArchivo(arido.getDescripcion());
                }
                m.cerrarArchivo();
                UIManager.put("OptionPane.messageDialogTitle", "Mensaje");
                JOptionPane.showMessageDialog(this, "Se ha actualizado el stock del árido");
            } else {
            }
        } else {
            JOptionPane.showMessageDialog(null, mensajeError.toString(), "Error de validación", JOptionPane.WARNING_MESSAGE);
        }
        
        
        
        
    }//GEN-LAST:event_actualizarStockButtonActionPerformed

    private void actualizarPrecioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarPrecioButtonActionPerformed
        String nombre = nombreAridoPrecioActualizar.getText();
        String precio = precioAridoActualizar.getText();

        int encontrado = 0;
        ArrayList<Arido> arregloAridosAVerificar = new ArrayList<>();
        ManejadorDeArchivo m = new ManejadorDeArchivo("aridos.txt");
        m.abrirArchivo();
        m.leerDatosAridos(arregloAridosAVerificar);
        m.cerrarArchivo();

        for (Arido arido : arregloAridosAVerificar) {
            String nombreArido = String.valueOf(arido.getNombre());
            if (nombreArido.equalsIgnoreCase(nombre)) {
                encontrado = 1;
                arido.setPrecio(Double.parseDouble(precio));
                break;
            }
        }

        // CONTROLES
        boolean valido = true;
        StringBuilder mensajeError = new StringBuilder("Se encontraron los siguientes errores:\n");

        if (nombre.isEmpty() || precio.isEmpty()) {
            mensajeError.append("- Todos los campos son obligatorios.\n");
            valido = false;
        } else {

            if (!nombre.matches("[a-zA-Z ]{2,}")) {
                mensajeError.append("- El nombre debe contener solo letras y tener más de dos caracteres.\n");
                valido = false;
            }

            if (!precio.matches("\\d+(\\.\\d+)?") || Double.parseDouble(precio) <= 0) {
                mensajeError.append("- El precio debe contener un número positivo.\n");
                valido = false;
            }

            if (encontrado != 1) {
                mensajeError.append("- El nombre del árido no fue ingresado previamente.\n");
                valido = false;
            }
        }

        // FIN CONTROLES
        if (valido) {
            UIManager.put("OptionPane.titleText", "Seleccione una opción");
            UIManager.put("OptionPane.yesButtonText", "Sí");
            UIManager.put("OptionPane.noButtonText", "No");
            UIManager.put("OptionPane.cancelButtonText", "Cancelar");
            int opcion = JOptionPane.showConfirmDialog(this, "Confirma actualizar el precio del árido?");
            if (opcion == JOptionPane.YES_OPTION) {
                m.abrirArchivo();
                m.borrarContenidoArchivo("aridos.txt");
                for (Arido arido : arregloAridosAVerificar) {
                    m.escribirEnArchivo(arido.getNombre());
                    m.escribirEnArchivo(String.valueOf(arido.getStock()));
                    m.escribirEnArchivo(String.valueOf(arido.getPrecio()));
                    m.escribirEnArchivo(arido.getDescripcion());
                }
                m.cerrarArchivo();
                JOptionPane.showMessageDialog(this, "Se ha actualizado el precio del árido");
            } else {
            }
        } else {
            JOptionPane.showMessageDialog(null, mensajeError.toString(), "Error de validación", JOptionPane.WARNING_MESSAGE);
        }


    }//GEN-LAST:event_actualizarPrecioButtonActionPerformed

    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz_Grafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz_Grafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz_Grafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz_Grafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz_Grafica().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actualizarPrecioButton;
    private javax.swing.JButton actualizarStockButton;
    private javax.swing.JTextPane apellidoEmpleadoTextPanel;
    private javax.swing.JTextPane apellidoTextPanel;
    private javax.swing.JButton botonRegistrarEmpleado;
    private javax.swing.JTextPane capacidadCargaCamion;
    private javax.swing.JTextPane clienteCompra;
    private javax.swing.JTextPane combustibleCamion;
    private javax.swing.JTextPane combustibleMaquina;
    private javax.swing.JTextPane descripcionArido;
    private javax.swing.JTextPane direccionEmpleadoTextPanel;
    private javax.swing.JTextPane direccionTextPanel;
    private javax.swing.JTextPane dniEmpleadoTextPanel;
    private javax.swing.JTextPane dniTextPanel;
    private javax.swing.JTextPane emailTextPanel;
    private javax.swing.JTextPane empleadoACargoCamion;
    private javax.swing.JTextPane empleadoACargoCompra1;
    private javax.swing.JTextPane empleadoACargoCompra2;
    private javax.swing.JTextPane empleadoACargoCompra3;
    private javax.swing.JTextPane empleadoACargoMaquina;
    private org.jdatepicker.JDatePicker fechaCompraCamion;
    private org.jdatepicker.JDatePicker fechaCompraMaquina;
    private org.jdatepicker.JDatePicker fechaEmpleado;
    private org.jdatepicker.JDatePicker fechaEntregaCompra;
    private org.jdatepicker.JDatePicker fechaFinCompras;
    private org.jdatepicker.JDatePicker fechaInicioCompras;
    private org.jdatepicker.JDatePicker fechaPedidoCompra;
    private org.jdatepicker.JDatePicker fechaServiceMaquina;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane20;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane24;
    private javax.swing.JScrollPane jScrollPane25;
    private javax.swing.JScrollPane jScrollPane26;
    private javax.swing.JScrollPane jScrollPane28;
    private javax.swing.JScrollPane jScrollPane29;
    private javax.swing.JScrollPane jScrollPane30;
    private javax.swing.JScrollPane jScrollPane31;
    private javax.swing.JScrollPane jScrollPane32;
    private javax.swing.JScrollPane jScrollPane33;
    private javax.swing.JScrollPane jScrollPane34;
    private javax.swing.JScrollPane jScrollPane35;
    private javax.swing.JScrollPane jScrollPane36;
    private javax.swing.JScrollPane jScrollPane39;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane40;
    private javax.swing.JScrollPane jScrollPane41;
    private javax.swing.JScrollPane jScrollPane42;
    private javax.swing.JScrollPane jScrollPane43;
    private javax.swing.JScrollPane jScrollPane44;
    private javax.swing.JScrollPane jScrollPane45;
    private javax.swing.JScrollPane jScrollPane46;
    private javax.swing.JScrollPane jScrollPane47;
    private javax.swing.JScrollPane jScrollPane48;
    private javax.swing.JScrollPane jScrollPane49;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane50;
    private javax.swing.JScrollPane jScrollPane51;
    private javax.swing.JScrollPane jScrollPane52;
    private javax.swing.JScrollPane jScrollPane53;
    private javax.swing.JScrollPane jScrollPane54;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTabbedPane jTabbedPane5;
    private javax.swing.JTabbedPane jTabbedPane6;
    private javax.swing.JTextPane legajoEmpleadoTextPanel;
    private javax.swing.JTextPane marcaCamion;
    private javax.swing.JTextPane marcaMaquina;
    private javax.swing.JTextPane metrosCubicosCompra;
    private javax.swing.JTextPane modeloCamion;
    private javax.swing.JTextPane modeloMaquina;
    private javax.swing.JButton mostrarClientesOrdenadosAlfabeticamente;
    private javax.swing.JButton mostrarClientesOrdenadosPorCompras;
    private javax.swing.JButton mostrarDatosAridos;
    private javax.swing.JButton mostrarDatosCompra;
    private javax.swing.JButton mostrarDatosEmpleados;
    private javax.swing.JButton mostrarMaquinaria;
    private javax.swing.JTextPane motorCamion;
    private javax.swing.JTextPane motorMaquina;
    private javax.swing.JTextPane nombreArido;
    private javax.swing.JTextPane nombreAridoActualizar;
    private javax.swing.JTextPane nombreAridoCompra;
    private javax.swing.JTextPane nombreAridoPrecioActualizar;
    private javax.swing.JTextPane nombreEmpleadoTextPanel;
    private javax.swing.JTextPane nombreTextPanel;
    private javax.swing.JTextPane precioArido;
    private javax.swing.JTextPane precioAridoActualizar;
    private javax.swing.JButton registrarArido;
    private javax.swing.JButton registrarCamion;
    private javax.swing.JButton registrarCliente;
    private javax.swing.JButton registrarCompra;
    private javax.swing.JButton registrarMaquina;
    private javax.swing.JTextPane stockArido;
    private javax.swing.JTextPane stockAridoActualizar;
    private javax.swing.JTable tablaAridos;
    private javax.swing.JTable tablaCompras;
    private javax.swing.JTable tablaEmpleados;
    private javax.swing.JTable tablaMaquinaria;
    private javax.swing.JTable tablaOrdenadaAlfabeticamente;
    private javax.swing.JTable tablaOrdenadaPorCompras;
    private javax.swing.JTextPane telefonoEmpleadoTextPanel;
    private javax.swing.JTextPane telefonoTextPanel;
    // End of variables declaration//GEN-END:variables
}
